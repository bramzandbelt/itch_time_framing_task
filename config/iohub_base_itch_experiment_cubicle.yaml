# The iohub_config.yaml includes settings for the iohub Process itself,
# the ioHub DataStore, and the list of ioHub devices that will be monitored
# for events with the ioHub Process runs.
#
# This is just an example of a properly defined iohub_config.yaml file,
# with lots of comments. The settings included, other than for monitored devices,
# defines all possible parameters. If the default value, as shown here,
# does not need to be changed for your experiment, then you do not need to
# include that parameter in your experiment's iohub_config.yaml file.


# global_event_buffer: Specifies the maximum number of events that can be stored in
#       the ioHub Process's Global Event Buffer, which holds events as they are
#       received from 'all' devices being monitored.
#
global_event_buffer: 2048

# udp_port: This sets the port number the ioHub UDP Server uses to accept incoming
#       message requests from.
#
udp_port: 9034


# data_store: A dictionary for prefernces related to the ioHub DataStore.
#
data_store:
    # enable: Should the ioHub DataStore to used while the ioHub process is running.
    #   True = the DataStore will be active and used by devices that have been configured to save events.
    #   False = Total disabling of the ioHub DataStore, regardless of any related device level preferences.
    #
    enable: False

    # filename: The name of the file that will be created by the DataStore.
    #           The full file name is the name given here + the '.hdf5' extension.
    #
    filename: events

    # multiple_experiments: The ioHub DataStore was deigned so that data
    #   from multiple experiments could be saved in the same hdf5 file.
    #   However in practive this has never really been used, so keeping the default
    #   value of False (each experiment creates a different DataStore file) is
    #   likely a good idea.
    #
    multiple_experiments: False

    # flush_interval: As events are given to the DataStore to be saved peristantly,
    #   events are buffered to memory and then written to the hdf5 file every
    #   flush_interval number of events. A smaller flush_interval means it will ccur more often
    #   but take less time; a larger value means event flushing will occur less
    #   frequently, but take longer to perform when it is done.
    #
    flush_interval: 32

# monitor_devices: specifies the list of devices that will be monitored for evenst while the ioHub
#   Process is running. All available settings for each device is listed in the device's manual page.
#   We only give any example of a possible device list here.
#
monitor_devices:

    # A Display device will be created by the ioHub Process
    #
    - Display:
        # The unique name to assign to the evice instance created.
        # The device is accessed from within the PsychoPy script
        # using the name's value; therefore it must be a valid Python
        # variable name as well.
        #
        name: display

        # The coordinate , or unit, type that the Display's surface area should
        # be represented in. Valid values are pix, deg, norm, or cm.
        #
        reporting_unit_type: pix

        # The Display index to assign to the device. On a single Display
        # computer this must always be 0. On a computer with multiple displays,
        # the value can be between 0 and display_count - 1.
        #
        device_number: 0

        # This section of parameters defines the actual size of the Display's
        # 2D stimulus surface. Both width and height values are the total length of each dimention.
        # The unit_type field must currently be in mm, and therefore so must
        # the specified width and height.
        #
        # See here: http://accessories.us.dell.com/sna/productdetail.aspx?c=us&l=en&cs=19&sku=320-9794
        physical_dimensions:
            width: 527
            height: 296
            unit_type: mm

        # Enter the expected, average, distance that the participants eye(s) will
        # be from the display's stimulus surface. Currently the only supported
        # distance reference type is surface_center, and the distance must be specified in
        # the unit_type of mm.
        #
        default_eye_distance:
            surface_center: 550
            unit_type: mm

        # If the Display device should open a PsychoPy Monitor Configuration
        # file, provide the name of it here.
        #
        psychopy_monitor_name: DELL_P2414H

        # If a valid PsychoPy Monitor Configuration file
        # has been provided, specify if the physical parameters
        # stored in it should override any duplicate parameter types
        # defined in this Display device configuartion.
        # True == Use the PsychoPy settings and update the Display config with them.
        # False == Use the measurements provided in this file and update the
        # the PsychoPy Monitor Configuration with the values specified
        # in the ioHub Device configuration.
        #
        override_using_psycho_settings: False
    - Keyboard:
        # name: The name you want to assign the keyboard device for the experiment
        #   This name is what will be used to access the device within the experiment
        #   script via the devices.[device_name] property of the ioHubConnection or
        #   ioHubExperimentRuntime classes.
        #
        name: keyboard

        # monitor_event_types: *If* the ioHubDataStore is enabled for the experiment, then
        #   indicate which KeyboardEvent types should be monitored
        #   for and therefore saved to the DataStore or sent to the Experiment Process.
        #
        monitor_event_types: [KeyboardPressEvent]

        # report_auto_repeat_press_events: Should the keyboard report key press events
        #   that are generated by the OS when a key is held down for an extended
        #   period of time.
        #
        report_auto_repeat_press_events: False

        # event_buffer_length: Specify the maximum number of events (for each
        #   event type the device produces) that can be stored by the ioHub Server
        #   before each new event results in the oldest event of the same type being
        #   discarded from the ioHub device event buffer.
        #
        event_buffer_length: 256